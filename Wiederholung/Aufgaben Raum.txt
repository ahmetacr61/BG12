Wiederholung

--------
AB 1

Nr.1
b)
Man könnte ein Attribut namens anzahlStuehle als Datentyp "int" hinzufügen, sodass man dann auch weiß, wie viele Stühle pro Raum zur verfügung stehen.

e)
Unter Überladen eines Konstuktors versteht man, dass man verschiedene "Versionen" von einem Konstruktor hat, wo man nicht alle (oder nur bestimmte) Parameter vergeben muss.
In diesem Fall hab ich den Parameter "besitztWaschbecken" weggelassen, und falls man dies im Konstruktor nicht "vergibt", dann wird der boolean automatisch auf "false" gesetzt.
--------
AB 2

Nr.1)
a)
Unter der Vererbung bei der OOP versteht man, dass eine neue Klasse die Attribute einer bereits vorhandenen Klasse verwenden kann, ohne diese in der neuen Klasse nochmal neu zu deklarieren.

Nr.2)
Es existiert eine abstrakte Hauptgruppe (eine Gruppe die keinen Constructor hat) namens "Person", welcher die privaten Attribute vorname und name hat. Beide dieser Attribute sind der Dateityp String.
Des weiteren erben 3 Klassen (lehrer, Verwaltungspersonal und Schüler) von der Hauptklasse.
Die Klasse Lehrer hat ein privates Attribut namens erstfach, welcher der Datentyp "String" ist.
Die Klasse Verwaltungspersonal hat ein privates Attribut namens funktion, welcher der Datentyp "String" ist.
Die Klasse Schüler hat ein privates Attribut namens mathenote, welcher der Datentyp "int" ist.
--------
AB 5

Nr.1)
a)
Raum:
- private Attribut mit deren bezeichnungen, wie raumID als Integer, raucher als boolen (Ob man im Raum rauchen darf) und eine Arraylist von der Klasse "Tische" wo die anzahl der Tische angezeigt wird.
- public Constructor für den Raum mir den Attributen raumID (als Integer) und raucher (als boolean).
- public getter und setter für alle Attribute.
- public Funktion des Typen void namens hinzufuegenTisch() mit Attribut eintisch (des "Objekts" Tisch).
- public Funktion des Typen void namens loeschenTisch() mit Attribut eintisch (des "Objekts" Tisch).
- public Funktion des Typen ArrayList namens getTische().

Restaurant:
- Besitzt mehr als 1 Objekt der Klasse "Raum"
- private Attribut namens raeume des Datentyps ArrayList
- public Funktion des Tyen void hinzufuegenRaum() mit Attribut einRaum (des "Objekts" Raum)
- public Funktion des Typen void loeschenRaum() mit Atribut einRaum (des "Objekts" Raum)
- public Funktion des Typen ArrayList getRaueme() ohne Attribute 